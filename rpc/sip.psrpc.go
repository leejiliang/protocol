// Code generated by protoc-gen-psrpc v0.5.1, DO NOT EDIT.
// source: rpc/sip.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)

var _ = version.PsrpcVersion_0_5

// ============================
// SIPInternal Client Interface
// ============================

type SIPInternalClient interface {
	CreateSIPParticipant(ctx context.Context, topic string, req *InternalCreateSIPParticipantRequest, opts ...psrpc.RequestOption) (*InternalCreateSIPParticipantResponse, error)
}

// ================================
// SIPInternal ServerImpl Interface
// ================================

type SIPInternalServerImpl interface {
	CreateSIPParticipant(context.Context, *InternalCreateSIPParticipantRequest) (*InternalCreateSIPParticipantResponse, error)
	CreateSIPParticipantAffinity(context.Context, *InternalCreateSIPParticipantRequest) float32
}

// ============================
// SIPInternal Server Interface
// ============================

type SIPInternalServer interface {
	RegisterCreateSIPParticipantTopic(topic string) error
	DeregisterCreateSIPParticipantTopic(topic string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ==================
// SIPInternal Client
// ==================

type sIPInternalClient struct {
	client *client.RPCClient
}

// NewSIPInternalClient creates a psrpc client that implements the SIPInternalClient interface.
func NewSIPInternalClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (SIPInternalClient, error) {
	sd := &info.ServiceDefinition{
		Name: "SIPInternal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CreateSIPParticipant", true, false, true, false)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &sIPInternalClient{
		client: rpcClient,
	}, nil
}

func (c *sIPInternalClient) CreateSIPParticipant(ctx context.Context, topic string, req *InternalCreateSIPParticipantRequest, opts ...psrpc.RequestOption) (*InternalCreateSIPParticipantResponse, error) {
	return client.RequestSingle[*InternalCreateSIPParticipantResponse](ctx, c.client, "CreateSIPParticipant", []string{topic}, req, opts...)
}

// ==================
// SIPInternal Server
// ==================

type sIPInternalServer struct {
	svc SIPInternalServerImpl
	rpc *server.RPCServer
}

// NewSIPInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSIPInternalServer(svc SIPInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (SIPInternalServer, error) {
	sd := &info.ServiceDefinition{
		Name: "SIPInternal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CreateSIPParticipant", true, false, true, false)
	return &sIPInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *sIPInternalServer) RegisterCreateSIPParticipantTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "CreateSIPParticipant", []string{topic}, s.svc.CreateSIPParticipant, s.svc.CreateSIPParticipantAffinity)
}

func (s *sIPInternalServer) DeregisterCreateSIPParticipantTopic(topic string) {
	s.rpc.DeregisterHandler("CreateSIPParticipant", []string{topic})
}

func (s *sIPInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *sIPInternalServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor8 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0xd6, 0xad, 0x5b, 0x6f, 0xd7, 0xad, 0x33, 0xdb, 0xb0, 0x82, 0xc4, 0xca, 0x06, 0x52,
	0xf7, 0x92, 0xc2, 0xf6, 0x82, 0x78, 0x02, 0x06, 0x12, 0x79, 0x00, 0x55, 0xd9, 0x78, 0xe1, 0x25,
	0x72, 0x13, 0x6f, 0x58, 0x4b, 0x6c, 0x63, 0xdf, 0xac, 0x2a, 0x1f, 0x80, 0xc4, 0x5f, 0xf0, 0x0d,
	0x7c, 0x1d, 0x8f, 0x28, 0x4e, 0xba, 0x75, 0x63, 0x45, 0x7d, 0xf3, 0x39, 0xe7, 0xde, 0x93, 0x63,
	0xfb, 0x3a, 0xd0, 0x31, 0x3a, 0x19, 0x58, 0xa1, 0x03, 0x6d, 0x14, 0x2a, 0xd2, 0x30, 0x3a, 0xf1,
	0x3b, 0x4a, 0xa3, 0x50, 0xd2, 0x56, 0x9c, 0xbf, 0x95, 0x89, 0x2b, 0x7e, 0x29, 0x30, 0xbe, 0x2e,
	0xdb, 0xff, 0xb3, 0x02, 0x07, 0xa1, 0x44, 0x6e, 0x24, 0xcb, 0x4e, 0x0c, 0x67, 0xc8, 0x4f, 0xc3,
	0xe1, 0x90, 0x19, 0x14, 0x89, 0xd0, 0x4c, 0x62, 0xc4, 0xbf, 0x15, 0xdc, 0x22, 0x79, 0x0c, 0x6d,
	0x2b, 0x74, 0x9c, 0xb0, 0x2c, 0x8b, 0x45, 0x4a, 0x3b, 0x3d, 0xaf, 0xdf, 0x8a, 0x5a, 0x56, 0xe8,
	0x13, 0x96, 0x65, 0x61, 0x4a, 0x28, 0xac, 0xb2, 0x34, 0x35, 0xdc, 0x5a, 0xba, 0xe4, 0xb4, 0x29,
	0x24, 0xc7, 0xd0, 0x42, 0xc3, 0xa4, 0xd5, 0xca, 0x20, 0xed, 0xf6, 0xbc, 0xfe, 0xc6, 0xd1, 0x4e,
	0x50, 0x07, 0x09, 0x4e, 0xc3, 0xe1, 0xd9, 0x54, 0x8c, 0x6e, 0xea, 0xc8, 0x2e, 0x34, 0x65, 0x91,
	0x8f, 0xb8, 0xa1, 0x0d, 0xe7, 0x56, 0x23, 0xf2, 0x10, 0x56, 0x5d, 0x04, 0x54, 0x74, 0xb9, 0x12,
	0x4a, 0x78, 0xa6, 0x88, 0x0f, 0x6b, 0x85, 0x2d, 0x77, 0x91, 0x73, 0xba, 0xe2, 0x94, 0x6b, 0x5c,
	0x6a, 0x9a, 0x59, 0x3b, 0x56, 0x26, 0xa5, 0xcd, 0x4a, 0x9b, 0x62, 0xf2, 0x08, 0x5a, 0x46, 0xa9,
	0x3c, 0x76, 0x8d, 0xab, 0x95, 0x58, 0x12, 0x9f, 0xca, 0xc6, 0x17, 0xb0, 0xad, 0x6f, 0x8e, 0x22,
	0x16, 0x29, 0x97, 0x28, 0x70, 0x42, 0xd7, 0x5c, 0xdd, 0x83, 0x19, 0x2d, 0xac, 0x25, 0x72, 0x08,
	0xdd, 0xd9, 0x16, 0x67, 0xbb, 0xe1, 0xca, 0x37, 0x67, 0xf8, 0xfb, 0xdc, 0x73, 0x8e, 0x2c, 0x65,
	0xc8, 0xe8, 0xe6, 0x3f, 0xee, 0x1f, 0x6b, 0x89, 0x7c, 0x87, 0xdd, 0xd9, 0x16, 0x86, 0x68, 0xc4,
	0xa8, 0x40, 0x6e, 0xe9, 0x56, 0xaf, 0xd1, 0x6f, 0x1f, 0x9d, 0x04, 0x46, 0x27, 0xc1, 0x02, 0xf7,
	0x19, 0xcc, 0x50, 0x6f, 0xae, 0x5d, 0xde, 0x4b, 0x34, 0x93, 0x68, 0x47, 0xdf, 0xa7, 0x91, 0x6d,
	0x58, 0x41, 0x75, 0xc9, 0x25, 0x6d, 0xb9, 0x7c, 0x15, 0x20, 0x3b, 0xd0, 0x1c, 0xdb, 0xb8, 0x30,
	0x19, 0x85, 0x8a, 0x1e, 0xdb, 0xcf, 0x26, 0x23, 0x04, 0x96, 0x53, 0xcc, 0xcf, 0x69, 0xdb, 0x91,
	0x6e, 0x4d, 0x0e, 0xa0, 0xa3, 0x33, 0x36, 0x89, 0x8d, 0x90, 0x17, 0xa8, 0x24, 0xa7, 0xeb, 0x3d,
	0xaf, 0xbf, 0x16, 0xad, 0x97, 0x64, 0x54, 0x73, 0x64, 0x0f, 0xda, 0x2c, 0x49, 0xb8, 0xc6, 0xd8,
	0xf5, 0x13, 0x57, 0x02, 0x15, 0xf5, 0x0e, 0xf3, 0x73, 0xff, 0x03, 0xf8, 0xf3, 0xb3, 0x93, 0x2e,
	0x34, 0x2e, 0xf9, 0x84, 0x7a, 0xee, 0xb3, 0xe5, 0xb2, 0x8c, 0x7d, 0xc5, 0xb2, 0x82, 0xd7, 0x63,
	0x59, 0x81, 0x57, 0x4b, 0x2f, 0xbd, 0xfd, 0x5f, 0x1e, 0x3c, 0xfd, 0xff, 0x51, 0x59, 0xad, 0xa4,
	0xe5, 0xe4, 0x19, 0x6c, 0xdc, 0x1e, 0x83, 0xda, 0xbf, 0x73, 0x6b, 0x00, 0xe6, 0x4e, 0xcb, 0xd2,
	0xfc, 0x69, 0xb9, 0xf3, 0xaa, 0x1a, 0x77, 0x5e, 0xd5, 0xd1, 0x0f, 0x0f, 0xda, 0xa7, 0xe1, 0x70,
	0x9a, 0x92, 0x8c, 0x61, 0xfb, 0xbe, 0xa4, 0xa4, 0xbf, 0xe8, 0xbd, 0xfb, 0x87, 0x0b, 0x54, 0x56,
	0xdb, 0xde, 0x87, 0xdf, 0x3f, 0xbd, 0x66, 0xd7, 0x7b, 0xed, 0x3d, 0xf7, 0xde, 0x3e, 0xf9, 0xb2,
	0x77, 0x21, 0xf0, 0x6b, 0x31, 0x0a, 0x12, 0x95, 0x0f, 0xea, 0xd7, 0x3b, 0x70, 0xbf, 0x90, 0x44,
	0x65, 0x03, 0xa3, 0x93, 0x51, 0xd3, 0xa1, 0xe3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xfe,
	0x19, 0x35, 0x88, 0x04, 0x00, 0x00,
}
