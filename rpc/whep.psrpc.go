// Code generated by protoc-gen-psrpc v0.5.1, DO NOT EDIT.
// source: rpc/whep.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

var _ = version.PsrpcVersion_0_5

// =============================
// WHEPInternal Client Interface
// =============================

type WHEPInternalClient interface {
	StartWHEP(ctx context.Context, req *StartWHEPRequest, opts ...psrpc.RequestOption) (*StartWHEPResponse, error)
}

// =================================
// WHEPInternal ServerImpl Interface
// =================================

type WHEPInternalServerImpl interface {
	StartWHEP(context.Context, *StartWHEPRequest) (*StartWHEPResponse, error)
	StartWHEPAffinity(context.Context, *StartWHEPRequest) float32
}

// =============================
// WHEPInternal Server Interface
// =============================

type WHEPInternalServer interface {

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ===================
// WHEPInternal Client
// ===================

type wHEPInternalClient struct {
	client *client.RPCClient
}

// NewWHEPInternalClient creates a psrpc client that implements the WHEPInternalClient interface.
func NewWHEPInternalClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (WHEPInternalClient, error) {
	sd := &info.ServiceDefinition{
		Name: "WHEPInternal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("StartWHEP", true, false, true, false)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &wHEPInternalClient{
		client: rpcClient,
	}, nil
}

func (c *wHEPInternalClient) StartWHEP(ctx context.Context, req *StartWHEPRequest, opts ...psrpc.RequestOption) (*StartWHEPResponse, error) {
	return client.RequestSingle[*StartWHEPResponse](ctx, c.client, "StartWHEP", nil, req, opts...)
}

// ===================
// WHEPInternal Server
// ===================

type wHEPInternalServer struct {
	svc WHEPInternalServerImpl
	rpc *server.RPCServer
}

// NewWHEPInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewWHEPInternalServer(svc WHEPInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (WHEPInternalServer, error) {
	sd := &info.ServiceDefinition{
		Name: "WHEPInternal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("StartWHEP", true, false, true, false)
	var err error
	err = server.RegisterHandler(s, "StartWHEP", nil, svc.StartWHEP, svc.StartWHEPAffinity)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &wHEPInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *wHEPInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *wHEPInternalServer) Kill() {
	s.rpc.Close(true)
}

// ============================
// WHEPHandler Client Interface
// ============================

type WHEPHandlerClient interface {
	ICETrickle(ctx context.Context, topic string, req *ICETrickleRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	ICERestart(ctx context.Context, topic string, req *ICERestartWHIPResourceRequest, opts ...psrpc.RequestOption) (*ICERestartWHIPResourceResponse, error)

	DeleteWHEP(ctx context.Context, topic string, req *DeleteWHEPRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)
}

// ================================
// WHEPHandler ServerImpl Interface
// ================================

type WHEPHandlerServerImpl interface {
	ICETrickle(context.Context, *ICETrickleRequest) (*google_protobuf.Empty, error)

	ICERestart(context.Context, *ICERestartWHIPResourceRequest) (*ICERestartWHIPResourceResponse, error)

	DeleteWHEP(context.Context, *DeleteWHEPRequest) (*google_protobuf.Empty, error)
}

// ============================
// WHEPHandler Server Interface
// ============================

type WHEPHandlerServer interface {
	RegisterICETrickleTopic(topic string) error
	DeregisterICETrickleTopic(topic string)
	RegisterICERestartTopic(topic string) error
	DeregisterICERestartTopic(topic string)
	RegisterDeleteWHEPTopic(topic string) error
	DeregisterDeleteWHEPTopic(topic string)
	RegisterAllResourceTopics(topic string) error
	DeregisterAllResourceTopics(topic string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ==================
// WHEPHandler Client
// ==================

type wHEPHandlerClient struct {
	client *client.RPCClient
}

// NewWHEPHandlerClient creates a psrpc client that implements the WHEPHandlerClient interface.
func NewWHEPHandlerClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (WHEPHandlerClient, error) {
	sd := &info.ServiceDefinition{
		Name: "WHEPHandler",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("ICETrickle", false, false, true, true)
	sd.RegisterMethod("ICERestart", false, false, true, true)
	sd.RegisterMethod("DeleteWHEP", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &wHEPHandlerClient{
		client: rpcClient,
	}, nil
}

func (c *wHEPHandlerClient) ICETrickle(ctx context.Context, topic string, req *ICETrickleRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "ICETrickle", []string{topic}, req, opts...)
}

func (c *wHEPHandlerClient) ICERestart(ctx context.Context, topic string, req *ICERestartWHIPResourceRequest, opts ...psrpc.RequestOption) (*ICERestartWHIPResourceResponse, error) {
	return client.RequestSingle[*ICERestartWHIPResourceResponse](ctx, c.client, "ICERestart", []string{topic}, req, opts...)
}

func (c *wHEPHandlerClient) DeleteWHEP(ctx context.Context, topic string, req *DeleteWHEPRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "DeleteWHEP", []string{topic}, req, opts...)
}

// ==================
// WHEPHandler Server
// ==================

type wHEPHandlerServer struct {
	svc WHEPHandlerServerImpl
	rpc *server.RPCServer
}

// NewWHEPHandlerServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewWHEPHandlerServer(svc WHEPHandlerServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (WHEPHandlerServer, error) {
	sd := &info.ServiceDefinition{
		Name: "WHEPHandler",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("ICETrickle", false, false, true, true)
	sd.RegisterMethod("ICERestart", false, false, true, true)
	sd.RegisterMethod("DeleteWHEP", false, false, true, true)
	return &wHEPHandlerServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *wHEPHandlerServer) RegisterICETrickleTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "ICETrickle", []string{topic}, s.svc.ICETrickle, nil)
}

func (s *wHEPHandlerServer) DeregisterICETrickleTopic(topic string) {
	s.rpc.DeregisterHandler("ICETrickle", []string{topic})
}

func (s *wHEPHandlerServer) RegisterICERestartTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "ICERestart", []string{topic}, s.svc.ICERestart, nil)
}

func (s *wHEPHandlerServer) DeregisterICERestartTopic(topic string) {
	s.rpc.DeregisterHandler("ICERestart", []string{topic})
}

func (s *wHEPHandlerServer) RegisterDeleteWHEPTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "DeleteWHEP", []string{topic}, s.svc.DeleteWHEP, nil)
}

func (s *wHEPHandlerServer) DeregisterDeleteWHEPTopic(topic string) {
	s.rpc.DeregisterHandler("DeleteWHEP", []string{topic})
}

func (s *wHEPHandlerServer) allResourceTopicRegisterers() server.RegistererSlice {
	return server.RegistererSlice{
		server.NewRegisterer(s.RegisterICETrickleTopic, s.DeregisterICETrickleTopic),
		server.NewRegisterer(s.RegisterICERestartTopic, s.DeregisterICERestartTopic),
		server.NewRegisterer(s.RegisterDeleteWHEPTopic, s.DeregisterDeleteWHEPTopic),
	}
}

func (s *wHEPHandlerServer) RegisterAllResourceTopics(topic string) error {
	return s.allResourceTopicRegisterers().Register(topic)
}

func (s *wHEPHandlerServer) DeregisterAllResourceTopics(topic string) {
	s.allResourceTopicRegisterers().Deregister(topic)
}

func (s *wHEPHandlerServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *wHEPHandlerServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor9 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xdb, 0x10, 0xa5, 0x93, 0xb6, 0x6a, 0x56, 0x34, 0x8a, 0x8c, 0x44, 0x83, 0x7b, 0xe1,
	0xe4, 0xa0, 0xc2, 0x07, 0x20, 0x68, 0x50, 0x22, 0x71, 0x88, 0x42, 0x51, 0x25, 0x2e, 0xd1, 0x66,
	0x3d, 0x71, 0x57, 0x71, 0x76, 0x97, 0xd9, 0x35, 0x16, 0x9f, 0xd0, 0x0f, 0xe0, 0xc6, 0x57, 0xf4,
	0x0b, 0x91, 0xed, 0x75, 0x13, 0xb5, 0x88, 0x8a, 0xe3, 0x7b, 0x33, 0xfb, 0xe6, 0xcd, 0xf3, 0x18,
	0x8e, 0xc9, 0x88, 0x51, 0x71, 0x83, 0x26, 0x36, 0xa4, 0x9d, 0x66, 0xfb, 0x64, 0x44, 0x78, 0xa4,
	0x8d, 0x93, 0x5a, 0xd9, 0x9a, 0x0b, 0x7b, 0x65, 0x8f, 0x54, 0x29, 0xa1, 0x6d, 0xa8, 0x17, 0xa9,
	0xd6, 0x69, 0x86, 0xa3, 0x0a, 0x2d, 0xf3, 0xd5, 0x08, 0x37, 0xc6, 0xfd, 0xac, 0x8b, 0x51, 0x01,
	0x27, 0x5f, 0x1c, 0x27, 0x77, 0x3d, 0x19, 0xcf, 0xe6, 0xf8, 0x3d, 0x47, 0xeb, 0xd8, 0x73, 0x78,
	0xe6, 0xf4, 0x1a, 0xd5, 0x20, 0x18, 0x06, 0xaf, 0x0f, 0xe6, 0x35, 0x60, 0xa7, 0xd0, 0x2e, 0xec,
	0x22, 0xa7, 0x6c, 0xb0, 0x57, 0xd3, 0x85, 0xfd, 0x4a, 0x19, 0x1b, 0x42, 0xd7, 0x70, 0x72, 0x52,
	0x48, 0xc3, 0x95, 0x1b, 0xec, 0x57, 0xb5, 0x5d, 0xaa, 0x94, 0xd3, 0xab, 0x15, 0xd2, 0xa0, 0x55,
	0xbf, 0xab, 0x40, 0xf4, 0x19, 0x7a, 0x3b, 0x83, 0xad, 0xd1, 0xca, 0x22, 0x3b, 0x83, 0x2e, 0xa1,
	0xd5, 0x39, 0x09, 0x5c, 0xc8, 0xc4, 0xcf, 0x87, 0x86, 0x9a, 0x26, 0xac, 0x0f, 0x6d, 0xae, 0x6c,
	0x81, 0xe4, 0x4d, 0x78, 0x14, 0xfd, 0x0a, 0xa0, 0x37, 0xfd, 0x38, 0xbe, 0x22, 0x29, 0xd6, 0x19,
	0x36, 0x8b, 0x3c, 0x29, 0x77, 0x0e, 0x47, 0xb9, 0x45, 0x5a, 0xac, 0x88, 0xa7, 0x1b, 0x54, 0xce,
	0xab, 0x1e, 0x96, 0xe4, 0x27, 0xcf, 0xb1, 0x10, 0x3a, 0x86, 0x5b, 0x5b, 0x68, 0x4a, 0xfc, 0x7a,
	0xf7, 0x98, 0xbd, 0x04, 0x10, 0x5c, 0x25, 0x32, 0xe1, 0x0e, 0xed, 0xa0, 0x35, 0xdc, 0x2f, 0x07,
	0x6c, 0x99, 0xe8, 0x1d, 0xf4, 0x2e, 0x31, 0x43, 0x87, 0xbb, 0xf9, 0x3e, 0x65, 0xeb, 0xe2, 0x0a,
	0x0e, 0xcb, 0xfe, 0xa9, 0x72, 0x48, 0x8a, 0x67, 0xec, 0x12, 0x0e, 0xee, 0xb3, 0x62, 0xa7, 0x31,
	0x19, 0x11, 0x3f, 0xfc, 0x68, 0x61, 0xff, 0x21, 0x5d, 0x47, 0x1a, 0x75, 0xee, 0x6e, 0x83, 0xd6,
	0xfb, 0xe0, 0x4d, 0x70, 0xf1, 0x7b, 0x0f, 0xba, 0x65, 0x69, 0xc2, 0x55, 0x92, 0x21, 0xb1, 0x19,
	0xc0, 0x36, 0x32, 0x56, 0xbf, 0x7f, 0x94, 0x61, 0xd8, 0x8f, 0xeb, 0xf3, 0x89, 0x9b, 0xf3, 0x89,
	0xc7, 0xe5, 0xf9, 0x44, 0xec, 0xee, 0x36, 0x38, 0x3e, 0x09, 0x42, 0x80, 0xce, 0xdc, 0x3b, 0x67,
	0xb2, 0x52, 0x9c, 0xa3, 0x2d, 0x5d, 0xb0, 0xa8, 0x51, 0xf4, 0xc4, 0xf5, 0x64, 0x3a, 0x6b, 0x5a,
	0x1b, 0xf5, 0xf3, 0x7f, 0xf6, 0xf8, 0x15, 0xfe, 0x36, 0x6a, 0x06, 0xb0, 0x0d, 0xd6, 0x9b, 0x7f,
	0x94, 0xf4, 0xff, 0x98, 0xff, 0xf0, 0xea, 0xdb, 0x59, 0x2a, 0xdd, 0x4d, 0xbe, 0x8c, 0x85, 0xde,
	0x8c, 0x32, 0xf9, 0x03, 0xd7, 0xd2, 0xd5, 0x3f, 0x8d, 0xd0, 0xd9, 0x88, 0x8c, 0x58, 0xb6, 0x2b,
	0xf4, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x23, 0xe5, 0x3f, 0x89, 0x03, 0x00, 0x00,
}
